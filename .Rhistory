library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "a8f3ce67cc31ac58e787",
secret = "e8fc815f608eab46722700df40cfeeb88125da45")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "a8f3ce67cc31ac58e787",
secret = "e8fc815f608eab46722700df40cfeeb88125da45")
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
final<-fromJSON(toJSON(req))
install.packages("jsonlite")
library(jsonlite)
final<-fromJSON(toJSON(req))
library(httr)
library(httpuv)
library(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "a8f3ce67cc31ac58e787",
secret = "e8fc815f608eab46722700df40cfeeb88125da45")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
repocontent <- content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
?fromJSON
??fromJSON
install.packages("RJSONIO")
library(httr)
library(httpuv)
library(RJSONIO)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "a8f3ce67cc31ac58e787",
secret = "e8fc815f608eab46722700df40cfeeb88125da45")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
# Data Cleaning Course Project
# This script processes the Samsung data set at the link below.
# Data: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# The folder with all the data "UCI HAR Dataset" must be in your working directory
# Load Librares
library(plyr)
library(data.table)
library(dplyr)
# Read Labels and create a feature label 'mask' to select means and standard deviation features
feature_labels <- t(read.table("UCI HAR Dataset/features.txt")) # Read and transpose feature labels
feature_labels = feature_labels[-1,] # Delete first row to leave just feature labels
feature_labels <- make.names(feature_labels,unique = TRUE) # Coerce into Valid R names
mask <- c(grep("mean",feature_labels),grep("std",feature_labels)) # Create selection mask for mean and std
mask <- sort(mask, decreasing = FALSE) # Sort mask in ascending order to cluster in same order as orginal data
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt") # Read Activity Labels
# Read and Label Test data Set
raw_test_data <- read.table("UCI HAR Dataset/test/X_test.txt",col.names=feature_labels)
raw_test_data <- raw_test_data[,mask] # Extract only means and standard deviations
raw_test_labels <- read.table("UCI HAR Dataset/test/y_test.txt",col.names="activity")
raw_subject_test_data <- read.table("UCI HAR Dataset/test/subject_test.txt",col.names="subject")
labelled_test_data <- cbind(raw_subject_test_data,raw_test_labels,raw_test_data)
# Read and Label Training data Set
raw_train_data <- read.table("UCI HAR Dataset/train/X_train.txt",col.names=feature_labels)
raw_train_data <- raw_train_data[,mask] # Extract only means and standard deviations
raw_train_labels <- read.table("UCI HAR Dataset/train/y_train.txt",col.names="activity")
raw_subject_train_data <- read.table("UCI HAR Dataset/train/subject_train.txt",col.names="subject")
labelled_train_data <-cbind(raw_subject_train_data,raw_train_labels,raw_train_data)
# Merge Test and Training datasets together having labelled them both
merged_data <- rbind(labelled_test_data,labelled_train_data)
# Convert activities variable to a factor variable
merged_data$activity <- factor(merged_data$activity,levels = activity_labels$V1, labels=activity_labels$V2)
# Calculate the means of each function grouped by subject and activity and store in a new data frame
tidydata <- merged_data %>%
group_by(subject,activity) %>%
summarise_each(funs(mean))
# Export the Tidy Data dataframe into a text file in working directory
write.table(tidydata,"tidydata.txt",row.name=FALSE)
# End Script
ls()
dir()
setwd("C:/datascience/R Programming Course")
setwd("C:/datascience/R Programming Course")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quartile(ppm)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col=="blue")
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12)
abline(v=12lwd=2)
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(polllution)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution,region="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$ppm25,col="green")
hist(east$pm25,col="green")
hist(subset(pollution$ppm,region=="west"),col="green")
hist(subset(pollution,region=="west"),col="green")
hist(ppm,data=subset(pollution,region=="west"),col="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$ppm,col=pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab ="Month",ylab = "Ozone (ppb)")
boxplot(Ozone~Month,airquality,xlab ="Month",ylab = "Ozone (ppb)",col.axis ="blue", col.lab = "red")
boxplot(Ozone~Month,airquality,xlab ="Month",ylab = "Ozone (ppb)",col.axis ="blue", col.lab = "red",main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
?pch
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone,set = "n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may <- subset(airquality,months==5)
head(airquality)
may <- subset(airquality,Month==5)
?par()
?par()
points(pch=27,col="red")
points(may$Wind, may$Ozone, pch=27,col="red")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<- subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrows=c(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone, main= "Ozone and Wind")
plot(irquality$Solar.R,airquality$Ozone, main= "Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone, main= "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone, main= "Ozone and Temperature")
mtext( "Ozone and Weather in New York City",outer=TRUE)
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
12
abline(h=0.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red", "orange","purple"), pch = 3, cex = 2,lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,col=cols1[newClust], pch = 19, cex = 2)
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newcx,newcy,col=cols1, pch = 8, cex = 2,lwd = 2)
points(newCx,newCy,col=cols1, pch = 8, cex = 2,lwd = 2)
mdist(x,y,newCx,newCy)
apply(distTmp2, 2, which.min)
points(x,y,col=cols1[newClust2], pch = 19, cex = 2)
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx,finalCy,col=cols1, pch = 9, cex = 2,lwd = 2)
kmeans(dataFrame,3)
kmObj$iter
points(x,y,col=kmObj$cluster,pch=19, cex=2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3, cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
readdata<-read_excel("total_and_per_capita_wealth_of_nations.xls",sheet = "total wealth, 2005",na = c(".."))
WBdata_2005 <- data.frame(readdata[6:214,1:21])
colnames(WBdata_2005) <- readdata[5,]
rownames(WBdata_2005) <- NULL
setwd("C:/Social Capital")
library(readxl)
readdata<-read_excel("total_and_per_capita_wealth_of_nations.xls",sheet = "total wealth, 2005",na = c(".."))
WBdata_2005 <- data.frame(readdata[6:214,1:21])
colnames(WBdata_2005) <- readdata[5,]
rownames(WBdata_2005) <- NULL
View(WBdata_2005)
rm(readdata)
readdata<-read_excel("http://data.worldbank.org/sites/default/files/total_and_per_capita_wealth_of_nations.xls",sheet = "total wealth, 2005",na = c(".."))
str(WBdata_2005)
?read_excel
WBdata_2005[, c(5:21)] <- sapply(WBdata_2005[, c(5:21)], as.numeric)
str(WBdata_2005)
WBdata_2005[, c(5:10)] <- sapply(WBdata_2005[, c(5:10)], as.numeric)
library(readxl)
readdata<-read_excel("total_and_per_capita_wealth_of_nations.xls",
sheet = "total wealth, 2005",na = c(".."))
WBdata_2005 <- data.frame(readdata[6:214,1:10])
colnames(WBdata_2005) <- readdata[5,1:10]
rownames(WBdata_2005) <- NULL
WBdata_2005[, c(5:10)] <- sapply(WBdata_2005[, c(5:10)], as.numeric)
str(WBdata_2005)
library(knitr)
knit('readme.Rmd')
library(knitr)
knit('readme.Rmd')
setwd("C:/Social Capital/Social Capital Analysis") #set a working directory for data - this directory needs to pre-exist
knit('readme.Rmd')
knit('readme.Rmd')
